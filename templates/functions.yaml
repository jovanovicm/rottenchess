AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Rotten Chess Functions

Parameters:
  VPC:
    Type: String
  SecurityGroup:
    Type: String
  PrivateSubnet:
    Type: String
  GameImportsTable:
    Type: String
  TrackedPlayersTable:
    Type: String
  PlayerStatsTable:
    Type: String
  GameQueue:
    Type: String

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - s3:*
                  - sqs:*
                  - ec2:*
                  - secretsmanager:GetSecretValue
                Resource: "*"
  
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - lambda:InvokeFunction
                  - logs:*
                Resource: "*"

  ImportPlayerGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/import_player_games/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-ImportPlayerGames
      Timeout: 600
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GAME_IMPORTS_TABLE: !Ref GameImportsTable
          TRACKED_PLAYERS_TABLE: !Ref TrackedPlayersTable
          PLAYER_STATS_TABLE: !Ref PlayerStatsTable
          SECRET_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:rotten-chess/user-agent-NKXP8b
      Architectures:
        - x86_64
  
  ImportPersonalityPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/import_personality_players/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-ImportPersonalityPlayers
      Timeout: 100
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TRACKED_PLAYERS_TABLE: !Ref TrackedPlayersTable
          PLAYER_STATS_TABLE: !Ref PlayerStatsTable
          SECRET_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:rotten-chess/user-agent-NKXP8b
      Architectures:
        - x86_64   
  
  EnqueueDynamoDBItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/enqueue_dynamodb_items/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-EnqueueDynamoDBItems
      Timeout: 300 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GAME_IMPORTS_TABLE: !Ref GameImportsTable
          SQS_QUEUE_URL: !Ref GameQueue
      Architectures:
        - x86_64
    
  PrivateLinkProvisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/provision_privatelinks/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-PrivateLinkProvision
      Timeout: 300 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          VPC_ID: !Ref VPC
          SUBNET_ID: !Ref PrivateSubnet
          SECURITY_GROUP_ID: !Ref SecurityGroup
      Architectures:
        - x86_64

  PrivateLinkDeprovisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/deprovision_privatelinks/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-PrivateLinkDeprovision
      Timeout: 300 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
  
  CheckQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/check_queue/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-CheckQueue
      Timeout: 60 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref GameQueue
      Architectures:
        - x86_64
  
  DeleteDynamoDBItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/delete_dynamodb_items/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-DeleteDynamoDBItems
      Timeout: 120 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GAME_IMPORTS_TABLE: !Ref GameImportsTable
      Architectures:
        - x86_64
  
  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "State machine to import, provision, enqueue, and deprovision.",
          "StartAt": "Parallel",
          "States": {
            "Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Import Player Games",
                  "States": {
                    "Import Player Games": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-ImportPlayerGames:$LATEST",
                      "Parameters": {
                        "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-ImportPlayerGames:$LATEST"
                      },
                      "ResultPath": "$.importResult",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Provision PrivateLinks",
                  "States": {
                    "Provision PrivateLinks": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkProvisionFunction:$LATEST",
                      "Parameters": {
                        "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkProvisionFunction:$LATEST"
                      },
                      "ResultPath": "$.provisionResult",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                }
              ],
              "Next": "Enqueue DynamoDB items"
            },
            "Enqueue DynamoDB items": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-EnqueueDynamoDBItems:$LATEST",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Check Queue"
            },
            "Check Queue": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-CheckQueue:$LATEST",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-CheckQueue:$LATEST"
              },
              "Next": "Is Queue Empty"
            },
            "Is Queue Empty": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.isEmpty",
                  "BooleanEquals": true,
                  "Next": "Deprovision PrivateLinks"
                }
              ],
              "Default": "Wait and Recheck Queue"
            },
            "Wait and Recheck Queue": {
              "Type": "Wait",
              "Seconds": 120,
              "Next": "Check Queue"
            },
            "Deprovision PrivateLinks": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkDeprovision:$LATEST",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkDeprovision:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Delete DynamoDB Items"
            },
            "Delete DynamoDB Items": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-DeleteDynamoDBItems:$LATEST",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-DeleteDynamoDBItems:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }