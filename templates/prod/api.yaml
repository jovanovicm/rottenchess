AWSTemplateFormatVersion: '2010-09-09'
Description: Production Rotten Chess REST API Resources

Parameters:
  GetPlayerStatsFunction:
    Type: String
  GetPlayersFunction:
    Type: String
  GetLeaderboardHistoryFunction:
    Type: String
  GetLastUpdatedFunction:
    Type: String

Resources:
  # IAM Role for API Gateway to push logs to CloudWatch
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  # API Gateway Account settings to use the IAM role for logging
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  # CloudWatch Log Group for API logs
  APILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: APILogGroup
      RetentionInDays: 14

  # API Gateway REST API
  RottenChessAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RottenChessAPI
      Description: Rotten Chess Production REST API

  # Resources and Methods
  GetPlayersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RottenChessAPI
      ParentId: !GetAtt RottenChessAPI.RootResourceId
      PathPart: players

  GetPlayerStatsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RottenChessAPI
      ParentId: !Ref GetPlayersResource
      PathPart: '{username}'

  InfoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RottenChessAPI
      ParentId: !GetAtt RottenChessAPI.RootResourceId
      PathPart: info

  LastUpdateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RottenChessAPI
      ParentId: !Ref InfoResource
      PathPart: lastupdate

  LeaderboardResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RottenChessAPI
      ParentId: !GetAtt RottenChessAPI.RootResourceId
      PathPart: leaderboard

  # Methods

  GetPlayerStatsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RottenChessAPI
      ResourceId: !Ref GetPlayerStatsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPlayerStatsFunction}/invocations

  GetPlayersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RottenChessAPI
      ResourceId: !Ref GetPlayersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPlayersFunction}/invocations

  GetLeaderboardHistoryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RottenChessAPI
      ResourceId: !Ref LeaderboardResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLeaderboardHistoryFunction}/invocations

  GetLastUpdatedMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RottenChessAPI
      ResourceId: !Ref LastUpdateResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLastUpdatedFunction}/invocations

  # Lambda Invoke Permissions

  LambdaInvokePermissionGetPlayerStats:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPlayerStatsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RottenChessAPI}/*/GET/players/*

  LambdaInvokePermissionGetPlayers:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPlayersFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RottenChessAPI}/*/GET/players

  LambdaInvokePermissionGetLeaderboardHistory:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetLeaderboardHistoryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RottenChessAPI}/*/GET/leaderboard

  LambdaInvokePermissionGetLastUpdated:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetLastUpdatedFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RottenChessAPI}/*/GET/info/lastupdate

  # Deployment and Stage

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPlayerStatsMethod
      - GetPlayersMethod
      - GetLeaderboardHistoryMethod
      - GetLastUpdatedMethod
    Properties:
      RestApiId: !Ref RottenChessAPI
      StageName: prod
      StageDescription:
        AccessLogSetting:
          DestinationArn: !GetAtt APILogGroup.Arn
          Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","statusCode":"$context.responseType","protocol":"$context.protocol","responseLength":"$context.responseLength","errorMessage":"$context.error.message","integrationErrorMessage":"$context.integrationErrorMessage"}'
      MethodSettings:
        - LoggingLevel: INFO
          DataTraceEnabled: true
          HttpMethod: "*"
          ResourcePath: "/*"

  # Custom Domain and SSL Certificate

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.rottenchess.com
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: api.rottenchess.com
          HostedZoneId: Z09567002DFAQSHJR757S

  APIDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: api.rottenchess.com
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref APIDomain
      RestApiId: !Ref RottenChessAPI
      Stage: prod

  # Route53 DNS Record

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z09567002DFAQSHJR757S
      Name: api.rottenchess.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIDomain.RegionalDomainName
        HostedZoneId: !GetAtt APIDomain.RegionalHostedZoneId