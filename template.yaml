AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rotten-chess

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - s3:*
                  - sqs:*
                  - ec2:*
                  - secretsmanager:GetSecretValue
                Resource: "*"
  
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - lambda:InvokeFunction
                  - logs:*
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - logs:*
                  - sqs:*
                  - s3:*
                  - dynamodb:*
                Resource: "*"
    
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action:
                  - cloudwatch:*
                  - ecs:*
                  - application-autoscaling:*
                Resource: "*"

  ImportPlayerGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/import_player_games/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-ImportPlayerGamesFunction
      Timeout: 600
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GAME_IMPORTS_TABLE: !Ref GameImportsTable
          TRACKED_PLAYERS_TABLE: !Ref TrackedPlayersTable
          PLAYER_STATS_TABLE: !Ref PlayerStatsTable
          SECRET_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:rotten-chess/user-agent-NKXP8b
      Architectures:
        - x86_64
  
  ImportPersonalityPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/import_personality_players/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-ImportPersonalityPlayersFunction
      Timeout: 100
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TRACKED_PLAYERS_TABLE: !Ref TrackedPlayersTable
          PLAYER_STATS_TABLE: !Ref PlayerStatsTable
          SECRET_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:rotten-chess/user-agent-NKXP8b
      Architectures:
        - x86_64   
  
  EnqueueDynamoDBItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/enqueue_dynamodb_items/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-EnqueueDynamoDBItemsFunction
      Timeout: 300 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GAME_IMPORTS_TABLE: !Ref GameImportsTable
          SQS_QUEUE_URL: !Ref GameQueue
      Architectures:
        - x86_64
    
  PrivateLinkProvisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/provision_privatelinks/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-PrivateLinkProvisionFunction
      Timeout: 300 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          VPC_ID: !Ref VPC
          SUBNET_ID: !Ref PrivateSubnet
          SECURITY_GROUP_ID: !Ref SecurityGroup
      Architectures:
        - x86_64

  PrivateLinkDeprovisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/deprovision_privatelinks/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-PrivateLinkDeprovisionFunction
      Timeout: 300 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
  
  CheckQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_queue/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-CheckQueueFunction
      Timeout: 60 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref GameQueue
      Architectures:
        - x86_64
  
  DeleteDynamoDBItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_dynamodb_items/
      Handler: app.lambda_handler
      Runtime: python3.12
      FunctionName: rotten-chess-DeleteDynamoDBItemsFunction
      Timeout: 120 
      MemorySize: 128  
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GAME_IMPORTS_TABLE: !Ref GameImportsTable
      Architectures:
        - x86_64
  
  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      StateMachineName: "rotten-chess-StateMachine"
      DefinitionString: !Sub |
        {
          "Comment": "State machine to import, provision, enqueue, and deprovision.",
          "StartAt": "Parallel",
          "States": {
            "Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Import Player Games",
                  "States": {
                    "Import Player Games": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-ImportPlayerGamesFunction:$LATEST",
                      "Parameters": {
                        "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-ImportPlayerGamesFunction:$LATEST"
                      },
                      "ResultPath": "$.importResult",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Provision PrivateLinks",
                  "States": {
                    "Provision PrivateLinks": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkProvisionFunction:$LATEST",
                      "Parameters": {
                        "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkProvisionFunction:$LATEST"
                      },
                      "ResultPath": "$.provisionResult",
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                }
              ],
              "Next": "Enqueue DynamoDB items"
            },
            "Enqueue DynamoDB items": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-EnqueueDynamoDBItemsFunction:$LATEST",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Check Queue"
            },
            "Check Queue": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-CheckQueueFunction:$LATEST",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-CheckQueueFunction:$LATEST"
              },
              "Next": "Is Queue Empty"
            },
            "Is Queue Empty": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.isEmpty",
                  "BooleanEquals": true,
                  "Next": "Deprovision PrivateLinks"
                }
              ],
              "Default": "Wait and Recheck Queue"
            },
            "Wait and Recheck Queue": {
              "Type": "Wait",
              "Seconds": 120,
              "Next": "Check Queue"
            },
            "Deprovision PrivateLinks": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkDeprovisionFunction:$LATEST",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:rotten-chess-PrivateLinkDeprovisionFunction:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }

  GameImportsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: game_uuid
        Type: String
  
  TrackedPlayersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: username
        Type: String
  
  PlayerStatsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: username
        Type: String
  
  GameQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: rotten-chess-game-queue

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: rotten-chess-ECSLogGroup
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: rotten-chess-game-analysis

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: rotten-chess-task
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: chess-analysis
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/rotten-chess-ecr-repository:latest
          Essential: true
          Cpu: 1024
          Memory: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SQS_QUEUE_URL
              Value: !Ref GameQueue
            - Name: PLAYER_STATS_TABLE
              Value: !Ref PlayerStatsTable

  ECSScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 100  
      MinCapacity: 0    
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  
  QueueMessagesAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt GameQueue.QueueName
      Statistic: Sum
      Period: 10
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSServiceScaleUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 10
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  # Not currently used
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSServiceScaleDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 10
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: rotten-chess-ecs-service
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet
          SecurityGroups:
            - !Ref SecurityGroup

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: rotten-chess-vpc

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Shared security group
      VpcId: !Ref VPC

  SecurityGroupAccessRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref SecurityGroup

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/24
      Tags:
        - Key: Name
          Value: rotten-chess-private-subnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: rotten-chess-route-table

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref RouteTable
  
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
  
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC




  

